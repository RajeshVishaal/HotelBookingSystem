// <auto-generated />
using System;
using System.Collections.Generic;
using InventoryService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251027224040_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelFacilities", b =>
                {
                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.HasKey("HotelId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("HotelFacilities", (string)null);
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.BedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_BedTypes_Name");

                    b.ToTable("BedTypes");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconSVG")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Facilities_Name");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("AverageRating")
                        .HasPrecision(3, 1)
                        .HasColumnType("numeric(3,1)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("TotalReviews")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AverageRating")
                        .HasDatabaseName("IX_Hotels_AvgRating");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Hotels_Name");

                    b.HasIndex("City", "Country")
                        .HasDatabaseName("IX_Hotels_City_Country");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 1)
                        .HasColumnType("numeric(3,1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("IX_Reviews_HotelId");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_Reviews_Rating");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reviews_UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("TotalBooked")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomCategoryId");

                    b.HasIndex("HotelId", "Date")
                        .HasDatabaseName("IX_RoomAvailability_Hotel_Date");

                    b.HasIndex("HotelId", "RoomCategoryId", "Date")
                        .HasDatabaseName("IX_RoomAvailability_Hotel_Category_Date");

                    b.ToTable("RoomAvailabilities");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomBedConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("BedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BedTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BedTypeId")
                        .HasDatabaseName("IX_RoomBedConfigs_BedType");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("RoomBedConfigs");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("IX_RoomCategories_HotelId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("HotelId", "RoomTypeId")
                        .HasDatabaseName("IX_RoomCategories_Hotel_RoomType");

                    b.ToTable("RoomCategories");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("BaseRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseRate")
                        .HasDatabaseName("IX_RoomPricings_BaseRate");

                    b.HasIndex("RoomCategoryId")
                        .IsUnique()
                        .HasDatabaseName("IX_RoomPricings_Category");

                    b.ToTable("RoomPricings");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaximumGuests")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_RoomTypes_Name");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.SeasonalRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Rate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("RoomPricingId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomPricingId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_SeasonalRates_DateRange");

                    b.ToTable("SeasonalRates");
                });

            modelBuilder.Entity("RoomCategoryFacilities", b =>
                {
                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomCategoryId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("RoomCategoryFacilities", (string)null);
                });

            modelBuilder.Entity("HotelFacilities", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.Review", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomAvailability", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany()
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomBedConfig", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.BedType", "BedType")
                        .WithMany()
                        .HasForeignKey("BedTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("BedConfigs")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedType");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomCategory", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Entities.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomPricing", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithOne("Pricing")
                        .HasForeignKey("InventoryService.Domain.Entities.RoomPricing", "RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.SeasonalRate", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.RoomPricing", "RoomPricing")
                        .WithMany("SeasonalRates")
                        .HasForeignKey("RoomPricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomPricing");
                });

            modelBuilder.Entity("RoomCategoryFacilities", b =>
                {
                    b.HasOne("InventoryService.Domain.Entities.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryService.Domain.Entities.RoomCategory", null)
                        .WithMany()
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomCategory", b =>
                {
                    b.Navigation("BedConfigs");

                    b.Navigation("Pricing")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryService.Domain.Entities.RoomPricing", b =>
                {
                    b.Navigation("SeasonalRates");
                });
#pragma warning restore 612, 618
        }
    }
}
